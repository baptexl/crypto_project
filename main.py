import numpy as np

# Table S-Box pour SubBytes
S_BOX = [
    [0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76],
    [0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0],
    [0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15],
    [0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75],
    [0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84],
    [0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF],
    [0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8],
    [0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2],
    [0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73],
    [0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB],
    [0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79],
    [0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08],
    [0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A],
    [0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E],
    [0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF],
    [0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16]
]



# Matrice de mélange (MixColumns)
MIX_COLUMNS_MATRIX = [
    [0x02, 0x03, 0x01, 0x01],
    [0x01, 0x02, 0x03, 0x01],
    [0x01, 0x01, 0x02, 0x03],
    [0x03, 0x01, 0x01, 0x02]
]

# Fonction SubBytes : Substitution de chaque byte avec S-Box
def sub_bytes(state):
    for i in range(4):
        for j in range(4):
            row = state[i][j] // 16
            col = state[i][j] % 16
            state[i][j] = S_BOX[row][col]
    return state

# Fonction ShiftRows : Décalage des lignes
def shift_rows(state):
    """ Effectue le décalage des lignes pour AES """
      # Debug
    
    
    if not all(len(row) == 4 for row in state):
        raise ValueError(f"La matrice 'state' doit être 4x4, mais elle contient des lignes de tailles incorrectes : {[len(row) for row in state]}")
    
    # Décalage des lignes (utilisation de np.roll)
    state[1] = np.roll(state[1], -1)  # Décalage de 1 position à gauche
    state[2] = np.roll(state[2], -2)  # Décalage de 2 positions à gauche
    state[3] = np.roll(state[3], -3)  # Décalage de 3 positions à gauche
    
     # Debug
    return state

# Fonction MixColumns : Transformation des colonnes
def mix_columns(state): 
    for i in range(4):
        col = state[i]
        temp = [0] * 4
        for j in range(4):
            for k in range(4):
                temp[k] ^= galois_mult(col[j], MIX_COLUMNS_MATRIX[j][k])
        for i in range(4):
            state[i][j] = temp[i]
    return state


# Galois multiplication
def galois_mult(a, b):
    p = 0
    for i in range(8):
        if b & 1:
            p ^= a
        a <<= 1
        if a & 0x100:
            a ^= 0x11B
        b >>= 1
    return p & 0xFF

# Fonction AddRoundKey : Ajout de la sous-clé (XOR avec la clé)
def add_round_key(state, round_key):
    for i in range(4):
        for j in range(4):
            state[i][j] ^= round_key[i][j]
    return state

# Rcon (Round Constants) pour AES
Rcon = [
    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36,
    0x6C, 0xD8, 0xAB, 0x4D, 0x9A, 0x2F, 0x5E, 0xBC, 0x63, 0xC6,
    0x97, 0x35, 0x6A, 0xD4, 0xB3, 0x7A, 0xF4, 0xF3, 0xF1, 0xE7,
    0xC5, 0x91, 0x39, 0x72, 0xE1, 0xC7, 0x8F, 0x3D, 0x7E, 0xFC,
    0xF8, 0xEF, 0xC3, 0x9F, 0x2F, 0x5E, 0xBC, 0x63, 0xC6, 0x97
]

# Fonction Key Expansion : Génération des sous-clés
def key_expansion(key):
    """Génération des sous-clés AES à partir de la clé initiale."""
    round_keys = [key]
    print(f"Clé initiale : {key}")

    while len(round_keys) < 11:  # 10 tours + 1 clé initiale
        # Récupérer la dernière colonne de la dernière sous-clé
        temp = [row[-1] for row in round_keys[-1]]  # Dernière colonne de la dernière sous-clé
        
        # Afficher le contenu de temp avant SubBytes
        print(f"\nTour {len(round_keys)}:")
        print(f"temp avant SubBytes : {temp}")
        
        # Appliquer SubBytes sur chaque byte de la colonne
        temp = [S_BOX[b // 16][b % 16] for b in temp]
        
        # Afficher après SubBytes
        print(f"temp après SubBytes : {temp}")

        # Appliquer la Rcon (Rotation de la clé)
        rcon_index = len(round_keys) - 1
        print(f"Index utilisé pour Rcon : {rcon_index}")
        
        if rcon_index < len(Rcon):
            temp[0] ^= Rcon[rcon_index]  # La valeur de Rcon dépend du nombre de rondes
        else:
            raise ValueError(f"Index de Rcon hors limite: {rcon_index}")

        print(f"temp après ajout de Rcon : {temp}")

        # Ajouter la colonne modifiée à la nouvelle sous-clé
        round_key = [row[:] for row in round_keys[-1]]  # Copier la sous-clé précédente
        for i in range(4):  # XOR chaque colonne avec temp
            round_key[i][0] ^= temp[i]  # XOR avec la colonne modifiée (temp)
        
        round_keys.append(round_key)  # Ajouter la nouvelle sous-clé
        print(f"Sous-clé après le tour {len(round_keys) - 1} : {round_keys[-1]}")

    # Inverser les sous-clés pour le déchiffrement
    reversed_round_keys = round_keys[::-1]
    print("\nSous-clés inversées pour le déchiffrement :")
    for i, key in enumerate(reversed_round_keys):
        print(f"Sous-clé {i} : {key}")

    return round_keys, reversed_round_keys








# Fonction de chiffrement AES
def aes_encrypt(plain_text, round_keys):
    state = np.array(plain_text).reshape(4, 4)
    
    # Ajouter la clé initiale
    print(f"Chiffrement - Avant tour 0 : {state}")
    state = add_round_key(state, round_keys[0])
    print(f"Chiffrement - Après AddRoundKey (clé 0) : {state}")

    # 9 tours (pour AES-128)
    for round in range(1, 10):
        print(f"Chiffrement - Tour {round} avant transformations : {state}")
        state = sub_bytes(state)
        
        state = shift_rows(state)
        
        state = mix_columns(state)
        
        state = add_round_key(state, round_keys[round])
        print(f"Chiffrement - Après add_round_key au tour {round} : {state}")

    # Dernier tour sans MixColumns
    print(f"Chiffrement - Avant dernier tour : {state}")
    state = sub_bytes(state)
    print(f"Chiffrement - Après sub_bytes dernier tour : {state}")
    state = shift_rows(state)
    print(f"Chiffrement - Après shift_rows dernier tour : {state}")
    state = add_round_key(state, round_keys[10])
    print(f"Chiffrement - Après add_round_key dernier tour : {state}")

    return state





# === S-box (inversée) ===
# Cette S-box inversée est utilisée pendant le déchiffrement
inv_s_box = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
]

def inverse_sub_bytes(state):
    """Applique la S-box inverse à chaque octet de la matrice d'état."""
    for i in range(4):
        for j in range(4):
            state[i][j] = inv_s_box[state[i][j]]
    return state


def inverse_shift_rows(state):
    # Assurez-vous que 'state' est une matrice 4x4
    if state is None:
        print("Erreur : L'état est None dans inverse_shift_rows")
        return state

    # Décalage des lignes de l'état
    state[1] = np.roll(state[1], 1)
    state[2] = np.roll(state[2], 2)
    state[3] = np.roll(state[3], 3)
    
    return state



def inverse_mix_columns(state):
    """Effectue l'inverse du MixColumns."""
    # Matrice inverse de MixColumns
    INVERSE_MIX_COLUMNS_MATRIX = [
        [0x0e, 0x0b, 0x0d, 0x09],
        [0x09, 0x0e, 0x0b, 0x0d],
        [0x0d, 0x09, 0x0e, 0x0b],
        [0x0b, 0x0d, 0x09, 0x0e]
    ]
    
    for i in range(4):
        col = state[i]
        temp = [0] * 4
        for j in range(4):
            for k in range(4):
                temp[k] ^= galois_mult(col[j], INVERSE_MIX_COLUMNS_MATRIX[j][k])
        for i in range(4):
            state[i][j] = temp[i]
    return state



def aes_decrypt(ciphertext, reversed_round_keys):
    state = np.array(ciphertext).reshape(4, 4)
    print("Déchiffrement - État initial :")
    print(state)

    # 1️⃣ Premier tour : AddRoundKey, Inverse ShiftRows, Inverse SubBytes (pas de Inverse MixColumns)
    state = add_round_key(state, reversed_round_keys[0])
    print("Déchiffrement - Après add_round_key au tour 0 :")
    print(state)
    state = inverse_shift_rows(state)
    print("Déchiffrement - Après inverse_shift_rows au tour 0 :")
    print(state)
    state = inverse_sub_bytes(state)
    print("Déchiffrement - Après inverse_sub_bytes au tour 0 :")
    print(state)

    # 2️⃣-10️⃣ Tours restants : AddRoundKey → Inverse MixColumns → Inverse ShiftRows → Inverse SubBytes
    for round in range(1, 10):
        state = add_round_key(state, reversed_round_keys[round])
        state = inverse_mix_columns(state)
        state = inverse_shift_rows(state)
        state = inverse_sub_bytes(state)
        print(f"Déchiffrement - Après inverse_sub_bytes au tour {round} :")
        print(state)

    # Dernier tour : AddRoundKey → Inverse ShiftRows → Inverse SubBytes (pas de Inverse MixColumns)
    state = add_round_key(state, reversed_round_keys[10])
    state = inverse_shift_rows(state)
    state = inverse_sub_bytes(state)

    print("Texte déchiffré :")
    print(state)
    return state






# Fonction pour tester
def test_aes():
    key = [
        [0x2b, 0x7e, 0x15, 0x16],
        [0x28, 0xae, 0xd2, 0xa6],
        [0xab, 0xf7, 0x09, 0xcf],
        [0x4f, 0x3c, 0xfe, 0x1d]
    ]

    plain_text = [
        [0x32, 0x43, 0xf6, 0xa8],
        [0x88, 0x5a, 0x30, 0x8d],
        [0x31, 0x31, 0x98, 0xa2],
        [0xe0, 0x37, 0x07, 0x34]
    ]

    round_keys, reversed_round_keys = key_expansion(key)
    ciphertext = aes_encrypt(plain_text, round_keys)
    print("Texte chiffré  : ", ciphertext)
    decrypted_text = aes_decrypt(ciphertext, reversed_round_keys)

    print("\nTexte original : ", plain_text)
    print("Texte chiffré  : ", ciphertext)
    print("Texte déchiffré : ", decrypted_text)


if __name__ == "__main__":
    test_aes()
